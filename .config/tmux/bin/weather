#!/usr/bin/env bash
#
# Author: takuzoo3868
# Last Modified: 25 Nov 2018.
# API: http://developer.yahoo.com/weather
#
# osx need coreutils

# Check OS
ostype() { echo $OSTYPE | tr '[A-Z]' '[a-z]'; }

export SHELL_PLATFORM='unknown'

case "$(ostype)" in
  *'linux'*	) SHELL_PLATFORM='linux'	;;
  *'darwin'*	) SHELL_PLATFORM='osx'		;;
  *'bsd'*		) SHELL_PLATFORM='bsd'		;;
esac

shell_is_linux() { [[ $SHELL_PLATFORM == 'linux' || $SHELL_PLATFORM == 'bsd' ]]; }
shell_is_osx()   { [[ $SHELL_PLATFORM == 'osx' ]]; }
shell_is_bsd()   { [[ $SHELL_PLATFORM == 'bsd' ]]; }

export -f shell_is_linux
export -f shell_is_osx
export -f shell_is_bsd

# Path tmp file
export DIR_TEMPORARY="/tmp/tmux-weather_${USER}"
if [ ! -d "$DIR_TEMPORARY" ]; then
  mkdir -p "$DIR_TEMPORARY"
fi

# DEFAULT
WEATHER_DATA_PROVIDER_DEFAULT="yahoo"
WEATHER_UNIT_DEFAULT="c"
WEATHER_UPDATE_PERIOD_DEFAULT="600"
# input your woeid https://lab.syncer.jp/Tool/WOEID-Lookup/
WEATHER_LOCATION_DEFAULT="1118108"

export WEATHER_DATA_PROVIDER="${WEATHER_DATA_PROVIDER_DEFAULT}"
# What unit to use. Can be any of {c,f,k}.
export WEATHER_UNIT="${WEATHER_UNIT_DEFAULT}"
# How often to update the weather in seconds.
export WEATHER_UPDATE_PERIOD="${WEATHER_UPDATE_PERIOD_DEFAULT}"
# Name of GNU grep binary if in PATH, or path to it.
export WEATHER_GREP="${WEATHER_GREP_DEFAULT}"
# Your location. Find a code that works for you:
export WEATHER_LOCATION="${WEATHER_LOCATION_DEFAULT}"

# Setting grep command
if shell_is_bsd  && [ -f /user/local/bin/grep  ]; then
  WEATHER_GREP_DEFAULT="/usr/local/bin/grep"
else
  WEATHER_GREP_DEFAULT="grep"
fi

__default_settings() {
  if [ -z "$WEATHER_DATA_PROVIDER" ]; then
    export WEATHER_DATA_PROVIDER="${WEATHER_DATA_PROVIDER_DEFAULT}"
  fi
  if [ -z "$WEATHER_UNIT" ]; then
    export WEATHER_UNIT="${WEATHER_UNIT_DEFAULT}"
  fi
  if [ -z "$WEATHER_UPDATE_PERIOD" ]; then
    export WEATHER_UPDATE_PERIOD="${WEATHER_UPDATE_PERIOD_DEFAULT}"
  fi
  if [ -z "$WEATHER_GREP" ]; then
    export WEATHER_GREP="${WEATHER_GREP_DEFAULT}"
  fi
  if [ -z "$WEATHER_LOCATION" ]; then
    echo "No weather location specified.";
    exit 8
  fi
}

# Run status line in tmux
__run_weather() {
  __default_settings
  local tmp_file="${DIR_TEMPORARY}/weather_yahoo.txt"
  local weather
  case "$WEATHER_DATA_PROVIDER" in
    "yahoo") weather=$(__yahoo_weather) ;;
    *)
      echo "Unknown weather provider [${$WEATHER_DATA_PROVIDER}]";
      return 1
  esac
  if [ -n "$weather" ]; then
    echo "$weather"
  fi
}

# Get the weather from Yahoo!
__yahoo_weather() {
  degree=""
  if [ -f "$tmp_file" ]; then
    if shell_is_bsd; then
      last_update=$(stat -f "%m" ${tmp_file})
    elif shell_is_linux || shell_is_osx; then
      last_update=$(stat -c "%Y" ${tmp_file})
    fi
    time_now=$(date +%s)

    up_to_date=$(echo "(${time_now}-${last_update}) < ${WEATHER_UPDATE_PERIOD}" | bc)
    if [ "$up_to_date" -eq 1 ]; then
      __read_tmp_file
    fi
  fi

  if [ -z "$degree" ]; then
    weather_data=$(curl --max-time 4 -s "https://query.yahooapis.com/v1/public/yql?format=xml&q=SELECT%20*%20FROM%20weather.forecast%20WHERE%20u=%27${WEATHER_UNIT}%27%20AND%20woeid%20=%20%27${WEATHER_LOCATION}%27")
    if [ "$?" -eq "0" ]; then
      error=$(echo "$weather_data" | grep "problem_cause\|DOCTYPE");
      if [ -n "$error" ]; then
        echo "error"
        exit 1
      fi

      # Assume latest grep is in PATH
      gnugrep="${WEATHER_GREP}"

      # <yweather:units temperature="F" distance="mi" pressure="in" speed="mph"/>
      unit=$(echo "$weather_data" | "$gnugrep" -Zo "<yweather:units [^<>]*/>" | sed 's/.*temperature="\([^"]*\)".*/\1/')
      condition=$(echo "$weather_data" | "$gnugrep" -Zo "<yweather:condition [^<>]*/>")
      # <yweather:condition  text="Clear"  code="31"  temp="66"  date="Mon, 01 Oct 2012 8:00 pm CST" />
      degree=$(echo "$condition" | sed 's/.*temp="\([^"]*\)".*/\1/')
      condition=$(echo "$condition" | sed 's/.*text="\([^"]*\)".*/\1/')
      # Pull the times for sunrise and sunset so we know when to change the day/night indicator
      # <yweather:astronomy sunrise="6:56 am"   sunset="6:21 pm"/>
      if shell_is_bsd; then
        date_arg='-j -f "%H:%M %p "'
      else
        date_arg='-d'
      fi
      sunrise=$(date ${date_arg}"$(echo "$weather_data" | "$gnugrep" "yweather:astronomy" | sed 's/^\(.*\)sunset.*/\1/' | sed 's/^.*sunrise="\(.*m\)".*/\1/')" +%H%M)
      sunset=$(date ${date_arg}"$(echo "$weather_data" | "$gnugrep" "yweather:astronomy" | sed 's/^.*sunset="\(.*m\)".*/\1/')" +%H%M)
    elif [ -f "${tmp_file}" ]; then
      __read_tmp_file
    fi
  fi

  if [ -n "$degree" ]; then
    if [ "$WEATHER_UNIT" == "k" ]; then
      degree=$(echo "${degree} + 273.15" | bc)
    fi
    condition_symbol=$(__get_weather_image "$condition" "$sunrise" "$sunset") 
    echo "${condition_symbol} ${degree}°$(echo "$WEATHER_UNIT" | tr '[:lower:]' '[:upper:]')" | tee "${tmp_file}"
  fi
}

# Get symbol for condition. 
# Available conditions: http://developer.yahoo.com/weather/#codes
__get_weather_image() {
  local condition=$(echo "$1" | tr '[:upper:]' '[:lower:]')
  local sunrise="$2"
  local sunset="$3"
  case "$condition" in
    "tornado" | "tropical storm" | "hurricane")
      echo "" # weather_hurricane
      ;;
    "sunny" | "fair")
      time_forecast=$(date +%H%M)
      if [ "$time_forecast" -ge "$sunset" -o "$time_forecast" -le "$sunrise" ]; then
        echo ""
      else
        echo "滛" # mdi_weather_sunny
      fi
      ;;
    "hot")
      time_forecast=$(date +%H%M)
      if [ "$time_forecast" -ge "$sunset" -o "$time_forecast" -le "$sunrise" ]; then
        echo ""
      else
        echo "" # weather_hot
      fi
      ;;
    "rain" | "light rain" | "drizzle" | "light drizzle")
      echo ""
      ;;
    "showers" | "scattered showers")
      echo "" # weather_showers
      ;;
    "mixed rain and snow" | "mixed rain and sleet" | "freezing drizzle" | "freezing rain" | "mixed rain and hail" | "rain and snow")
      echo "" # weather_rain_mix
      ;;
    "light rain with thunder")
      echo "朗" # mdi_weather_lightning
      ;;
    "snow" | "mixed snow and sleet" | "snow flurries" | "light snow showers" | "blowing snow" | "sleet" | "heavy snow" | "scattered snow showers" | "snow showers" | "light snow" | "snow grains")
      echo ""
      ;;
    "hail")
      echo "晴" # mdi_weather_hail
      ;;
    "cloudy" | "mostly cloudy")
      echo "" # fa_cloud
      ;;
    "partly cloudy")
      echo "杖" # mdi_weather_partlycloudy
      ;;
    "severe thunderstorms" | "thunderstorms" | "isolated thunderstorms" | "scattered thunderstorms" | "isolated thundershowers" | "thundershowers")
      echo "" # weather_lightning
      ;;
    "dust" | "fog" | "haze" | "smoky")
      echo "" # weather_dust
      ;;
    "fog" | "foggy" | "mist")
      echo "" # weather_fog
      ;;
    "windy" | "blustery" | "breezy")
      echo "煮" # mdi_weather_windy
      ;;
    "clear" | "cold")
      time_forecast=$(date +%H%M)
      if [ "$time_forecast" -ge "$sunset" -o "$time_forecast" -le "$sunrise" ]; then
        echo "望" # mdi_weather_night
      else
        echo ""
      fi
      ;;
    "not available")
      echo "" 
      ;;
    *)
      echo "" # unknown
      ;;
  esac
}

__read_tmp_file() {
  if [ ! -f "$tmp_file" ]; then
    return
  fi
  cat "${tmp_file}"
  exit
}

# exec
__run_weather
